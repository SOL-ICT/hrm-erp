<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'preferences',
    ];

    /**
     * The attributes that should be hidden for serialization.
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
            'preferences' => 'array', // Automatically handle JSON
        ];
    }

    /**
     * Get user preferences with defaults
     */
    public function getPreferencesAttribute($value)
    {
        $defaults = [
            'theme' => 'light',
            'language' => 'en',
            'primary_color' => '#6366f1',
        ];

        // If value is null or empty, return defaults
        if (!$value) {
            return $defaults;
        }

        // If it's already an array (from cast), merge with defaults
        if (is_array($value)) {
            return array_merge($defaults, $value);
        }

        // If it's a JSON string, decode and merge
        $preferences = json_decode($value, true);
        return array_merge($defaults, $preferences ?: []);
    }

    /**
     * Set preferences - ensure it's always stored as JSON
     */
    public function setPreferencesAttribute($value)
    {
        if (is_array($value)) {
            $this->attributes['preferences'] = json_encode($value);
        } elseif (is_string($value)) {
            $this->attributes['preferences'] = $value;
        } else {
            $this->attributes['preferences'] = json_encode([]);
        }
    }
}
